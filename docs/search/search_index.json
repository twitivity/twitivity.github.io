{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"twitivity-deploy/","text":"Deploying On a Server Twitivity does all the heavy lifting under the hood. So that you can focus on what's really important \u2014 building your app. Deploying On Web Server # app.py import flask import json import hmac import os import hashlib import base64 import logging import flask logging.basicConfig( filename=\"app.log\", filemode=\"w\", level=logging.INFO, ) app = flask.Flask(__name__) os.environ[\"consumer_secret\"] = f\"{consumer_secret}\" @app.route(\"/webhook/twitter\", methods=[\"GET\", \"POST\"]) def callback() -> json: if flask.request.method == \"GET\" or flask.request.method == \"PUT\": hash_digest = hmac.digest( key=os.environ[\"consumer_secret\"].encode(\"utf-8\"), msg=flask.request.args.get(\"crc_token\").encode(\"utf-8\"), digest=hashlib.sha256, ) return { \"response_token\": \"sha256=\" + base64.b64encode(hash_digest).decode(\"ascii\") } elif flask.request.method == \"POST\": data = flask.request.get_json() logging.info(data) return {\"code\": 200} # Once the code running on the server. # You can register and subscribe to events from your local machine. # activity.py from pprint import pprint from twitivity import Activity if __name__ == '__main__': activity = Activity() pprint(activity.register_webhook( \"https://domain.com/webhook/twitter\")) pprint(activity.subscribe()) How do you view account activies in real-time? From your server, execute the following command. ``` ~$ tail -f app.log","title":"Deploying On a Server"},{"location":"twitivity-deploy/#deploying-on-a-server","text":"Twitivity does all the heavy lifting under the hood. So that you can focus on what's really important \u2014 building your app. Deploying On Web Server # app.py import flask import json import hmac import os import hashlib import base64 import logging import flask logging.basicConfig( filename=\"app.log\", filemode=\"w\", level=logging.INFO, ) app = flask.Flask(__name__) os.environ[\"consumer_secret\"] = f\"{consumer_secret}\" @app.route(\"/webhook/twitter\", methods=[\"GET\", \"POST\"]) def callback() -> json: if flask.request.method == \"GET\" or flask.request.method == \"PUT\": hash_digest = hmac.digest( key=os.environ[\"consumer_secret\"].encode(\"utf-8\"), msg=flask.request.args.get(\"crc_token\").encode(\"utf-8\"), digest=hashlib.sha256, ) return { \"response_token\": \"sha256=\" + base64.b64encode(hash_digest).decode(\"ascii\") } elif flask.request.method == \"POST\": data = flask.request.get_json() logging.info(data) return {\"code\": 200} # Once the code running on the server. # You can register and subscribe to events from your local machine. # activity.py from pprint import pprint from twitivity import Activity if __name__ == '__main__': activity = Activity() pprint(activity.register_webhook( \"https://domain.com/webhook/twitter\")) pprint(activity.subscribe()) How do you view account activies in real-time? From your server, execute the following command. ``` ~$ tail -f app.log","title":"Deploying On a Server"},{"location":"twitivity/","text":"Twitivity Twitivity Twitter Accounts Activity API Client Library for Python. Account Activity API allows you to subscribe to user activities. Unlike Twitter's REST API or the Streaming API, the Account Activity API delivers data through webhook connections. Which makes it faster and allows it to deliver Twitter data to you in real-time. You can subscribe to these user activities . Getting Started Apply for a Twitter Developer Account Create an application , fill in the required fields, the callback URL is your domain name with an added endpoint, for example https://yourdomain.com/listener . Twitter will later use this URL to send you account activity data. Make sure to enable \"Read, Write and Direct messages\" permission. Navigate to the Dev environment section and setup a dev environment for the Account Activity API. Name a dev environment label of your choosing and select your app. The next step is to register your webhook URL. Twitter will send a GET request with Challenge-Response Check or CRC token to verify you are the owner of the app and the webhook URL. To validate, an encrypted response token based on your consumer key and the CRC token has to be sent back to Twitter. Upon successful validation, registration of the webhook URL and subscription. Twitter will send data to this endpoint (the webhook URL) as a POST request. Why Twitivity? Twitivity does all the heavy lifting under the hood. All you have to do is to create an app and set up a dev environment. Run the application and concentrate on what's really important \u2014 building your app. Performs challenge-response check validation Registers webhook URL. Subscribes to current user's context Receives Twitter Account Activity in real-time Usage Ngrok is a handy tool to try out the API locally, on your machine. Install and run ngrok and replace your app's URL and callback URL with the link ngrok provides. Make sure to use the one with https . ~$ ./ngrok http 5000 Stream events in real time. # stream_events.py >>> from twitivity import Event >>> import json >>> class StreamEvent(Event): CALLBACK_URL: str = \"https://yourdomain.com/listener\" def on_data(self, data: json) -> None: # process data >>> stream_events = StreamEvent() >>> stream_events.listen() Configuration The configuration below only has to be done once before running the application for the first time. Store the credentials as environment variables. App :arrow_right: Details :arrow_right: Keys and Tokens ~$ export consumer_key=API_KEY ~$ export consumer_secret=API_SECRET_KEY ~$ export access_token=ACCESS_TOKEN ~$ export access_token_secret=ACCESS_TOKEN_SECRET ~$ export env_name=ENV_NAME # this is the dev environment label name you choose. Register & Subscribe To register the webhook URL and subscribe to activities, run both programs in parallel (first stream_events.py then configure.py ). This will register the webhook URL and subscribe to the user's activities. # configure.py >>> from twitivity import Activity >>> account_activity = Activity() >>> account_activity.register_webhook(\"https://youdomain.com/listener\") >>> account_activity.subscribe() # Response { 'id': '1198870971131686912', # webhook id 'url': 'https://yourdomain.com/listener', 'valid': True, 'created_timestamp': '2019-11-25 07:48:08 +0000' } Installation ~$ pip3 install twitivity Deploying Documentation on how to deploy it on web servers. Supported Versions: Python 3.6 , Python 3.7 and Python 3.8","title":"Twitivity"},{"location":"twitivity/#twitivity","text":"","title":"Twitivity"},{"location":"twitivity/#twitivity_1","text":"Twitter Accounts Activity API Client Library for Python. Account Activity API allows you to subscribe to user activities. Unlike Twitter's REST API or the Streaming API, the Account Activity API delivers data through webhook connections. Which makes it faster and allows it to deliver Twitter data to you in real-time. You can subscribe to these user activities .","title":"Twitivity"},{"location":"twitivity/#getting-started","text":"Apply for a Twitter Developer Account Create an application , fill in the required fields, the callback URL is your domain name with an added endpoint, for example https://yourdomain.com/listener . Twitter will later use this URL to send you account activity data. Make sure to enable \"Read, Write and Direct messages\" permission. Navigate to the Dev environment section and setup a dev environment for the Account Activity API. Name a dev environment label of your choosing and select your app. The next step is to register your webhook URL. Twitter will send a GET request with Challenge-Response Check or CRC token to verify you are the owner of the app and the webhook URL. To validate, an encrypted response token based on your consumer key and the CRC token has to be sent back to Twitter. Upon successful validation, registration of the webhook URL and subscription. Twitter will send data to this endpoint (the webhook URL) as a POST request.","title":"Getting Started"},{"location":"twitivity/#why-twitivity","text":"Twitivity does all the heavy lifting under the hood. All you have to do is to create an app and set up a dev environment. Run the application and concentrate on what's really important \u2014 building your app. Performs challenge-response check validation Registers webhook URL. Subscribes to current user's context Receives Twitter Account Activity in real-time","title":"Why Twitivity?"},{"location":"twitivity/#usage","text":"Ngrok is a handy tool to try out the API locally, on your machine. Install and run ngrok and replace your app's URL and callback URL with the link ngrok provides. Make sure to use the one with https . ~$ ./ngrok http 5000","title":"Usage"},{"location":"twitivity/#stream-events-in-real-time","text":"# stream_events.py >>> from twitivity import Event >>> import json >>> class StreamEvent(Event): CALLBACK_URL: str = \"https://yourdomain.com/listener\" def on_data(self, data: json) -> None: # process data >>> stream_events = StreamEvent() >>> stream_events.listen()","title":"Stream events in real time."},{"location":"twitivity/#configuration","text":"The configuration below only has to be done once before running the application for the first time.","title":"Configuration"},{"location":"twitivity/#store-the-credentials-as-environment-variables","text":"App :arrow_right: Details :arrow_right: Keys and Tokens ~$ export consumer_key=API_KEY ~$ export consumer_secret=API_SECRET_KEY ~$ export access_token=ACCESS_TOKEN ~$ export access_token_secret=ACCESS_TOKEN_SECRET ~$ export env_name=ENV_NAME # this is the dev environment label name you choose.","title":"Store the credentials as environment variables."},{"location":"twitivity/#register-subscribe","text":"To register the webhook URL and subscribe to activities, run both programs in parallel (first stream_events.py then configure.py ). This will register the webhook URL and subscribe to the user's activities. # configure.py >>> from twitivity import Activity >>> account_activity = Activity() >>> account_activity.register_webhook(\"https://youdomain.com/listener\") >>> account_activity.subscribe() # Response { 'id': '1198870971131686912', # webhook id 'url': 'https://yourdomain.com/listener', 'valid': True, 'created_timestamp': '2019-11-25 07:48:08 +0000' }","title":"Register &amp; Subscribe"},{"location":"twitivity/#installation","text":"~$ pip3 install twitivity","title":"Installation"},{"location":"twitivity/#deploying","text":"Documentation on how to deploy it on web servers. Supported Versions: Python 3.6 , Python 3.7 and Python 3.8","title":"Deploying"},{"location":"twitter-stream/","text":"API v2 Twitter Stream Sampled Stream Construct cleaner and concise queries. Subclass SampledStream, name your desired query parameters, and assign their values in a list. twitter-stream.py will take care of the rest. Here are the list of query parameters # sampled_stream.py import json from twitter_stream import SampledStream class Stream(SampledStream): user_fields = ['name', 'location', 'public_metrics'] expansions = ['author_id'] tweet_fields = ['created_at', 'geo'] stream = Stream() for tweet in stream.connect(): print(json.dumps(tweet, indent=4)) Recent Stream Get Recent Stream Based on your queries. Checkout the list of query parameters for Recent Stream # recent_search.py import json from twitter_stream import RecentSearch class Stream(RecentSearch): query = ['python'] max_results = ['10'] tweet_fields = ['created_at', 'lang', 'conversation_id'] stream = Stream() for tweet in stream.connect(): print(json.dumps(tweet, indent=4)) Filtered Stream For FilteredStream documentations on adding, deleting and retriving rules can be found here. twitivity.dev/docs # filtered_stream.py import json from twitter_stream import FilteredStream rules: list = [ {\"value\": \"dog has:images\", \"tag\": \"dog pictures\"}, {\"value\": \"cat has:images -grumpy\", \"tag\": \"cat pictures\"} ] stream = FilteredStream() stream.add_rule(data={\"add\": rules}) for tweet in stream.connect(): print(json.dumps(tweet, indent=4)) TweetLookUp Returns information about a Tweet or group of Tweets List of Query Parameters # tweet_lookup.py import json from twitter_stream import TweetLookUp class Tweet(TweetLookUp): ids = ['1261326399320715264','1278347468690915330'] expansions = ['author_id'] tweet_rules = ['created_at'] user_fields = ['username', 'verified'] tweet = Tweet() print(json.dumps(tweet, indent=4, sort_keys=True)) UserLookUp Returns a variety of information about one or more users specified by the requested IDs . List of Query Parameters # tweet_lookup.py import json from twitter_stream import UserLookUp class User(UserLookUp): ids = ['2244994945', '783214'] expansions = [\"pinned_tweet_id\"] user_fields = [\"created_at\"] tweet_fields = [\"created_at\"] user = User() print(json.dumps(user.get(), indent=4)) Returns a variety of information about one or more users specified by their usernames . List of Query Parameters # tweet_lookup_by_username.py import json from twitter_stream import UserLookUp class User(UserLookUp): usernames = ['TwitterDev', 'Twitter'] expansions = [\"pinned_tweet_id\"] user_fields = [\"created_at\"] tweet_fields = [\"created_at\"] user = User() print(json.dumps(user.get_by_usernames(), indent=4)) Returns a variety of information about one or more users specified by their usernames. List of Query Parameters # tweet_detail_lookup_by_username.py import json from twitter_stream import UserLookUp class User(UserLookUp): expansions = [\"pinned_tweet_id\"] user_fields = [\"created_at\"] tweet_fields = [\"created_at\"] user = User() print(json.dumps(user.get_details_by_username(\"TwitterDev\"), indent=4)) Hide Replies Store Credentials at ~/.twitter-keys.yaml keys: consumer_key: CONSUMER_KEY consumer_secret: CONSUMER_SECRET access_token: ACCESS_TOKEN access_token_secret: ACCESS_TOKEN_SECRET bearer_token: BEARER_TOKEN from twitter_stream import hide_replies response = hide_replies( tweet=\"https://twitter.com/saadmanrafat_/status/1327509412374740993\", hidden={\"hidden\": True} # {\"hidden\": False } in case of unhide ) print(response) OUTPUT: { \"data\": { \"hidden\": true } }","title":"API v2"},{"location":"twitter-stream/#api-v2","text":"","title":"API v2"},{"location":"twitter-stream/#twitter-stream","text":"","title":"Twitter Stream"},{"location":"twitter-stream/#sampled-stream","text":"Construct cleaner and concise queries. Subclass SampledStream, name your desired query parameters, and assign their values in a list. twitter-stream.py will take care of the rest. Here are the list of query parameters # sampled_stream.py import json from twitter_stream import SampledStream class Stream(SampledStream): user_fields = ['name', 'location', 'public_metrics'] expansions = ['author_id'] tweet_fields = ['created_at', 'geo'] stream = Stream() for tweet in stream.connect(): print(json.dumps(tweet, indent=4))","title":"Sampled Stream"},{"location":"twitter-stream/#recent-stream","text":"Get Recent Stream Based on your queries. Checkout the list of query parameters for Recent Stream # recent_search.py import json from twitter_stream import RecentSearch class Stream(RecentSearch): query = ['python'] max_results = ['10'] tweet_fields = ['created_at', 'lang', 'conversation_id'] stream = Stream() for tweet in stream.connect(): print(json.dumps(tweet, indent=4))","title":"Recent Stream"},{"location":"twitter-stream/#filtered-stream","text":"For FilteredStream documentations on adding, deleting and retriving rules can be found here. twitivity.dev/docs # filtered_stream.py import json from twitter_stream import FilteredStream rules: list = [ {\"value\": \"dog has:images\", \"tag\": \"dog pictures\"}, {\"value\": \"cat has:images -grumpy\", \"tag\": \"cat pictures\"} ] stream = FilteredStream() stream.add_rule(data={\"add\": rules}) for tweet in stream.connect(): print(json.dumps(tweet, indent=4))","title":"Filtered Stream"},{"location":"twitter-stream/#tweetlookup","text":"Returns information about a Tweet or group of Tweets List of Query Parameters # tweet_lookup.py import json from twitter_stream import TweetLookUp class Tweet(TweetLookUp): ids = ['1261326399320715264','1278347468690915330'] expansions = ['author_id'] tweet_rules = ['created_at'] user_fields = ['username', 'verified'] tweet = Tweet() print(json.dumps(tweet, indent=4, sort_keys=True))","title":"TweetLookUp"},{"location":"twitter-stream/#userlookup","text":"Returns a variety of information about one or more users specified by the requested IDs . List of Query Parameters # tweet_lookup.py import json from twitter_stream import UserLookUp class User(UserLookUp): ids = ['2244994945', '783214'] expansions = [\"pinned_tweet_id\"] user_fields = [\"created_at\"] tweet_fields = [\"created_at\"] user = User() print(json.dumps(user.get(), indent=4)) Returns a variety of information about one or more users specified by their usernames . List of Query Parameters # tweet_lookup_by_username.py import json from twitter_stream import UserLookUp class User(UserLookUp): usernames = ['TwitterDev', 'Twitter'] expansions = [\"pinned_tweet_id\"] user_fields = [\"created_at\"] tweet_fields = [\"created_at\"] user = User() print(json.dumps(user.get_by_usernames(), indent=4)) Returns a variety of information about one or more users specified by their usernames. List of Query Parameters # tweet_detail_lookup_by_username.py import json from twitter_stream import UserLookUp class User(UserLookUp): expansions = [\"pinned_tweet_id\"] user_fields = [\"created_at\"] tweet_fields = [\"created_at\"] user = User() print(json.dumps(user.get_details_by_username(\"TwitterDev\"), indent=4))","title":"UserLookUp"},{"location":"twitter-stream/#hide-replies","text":"Store Credentials at ~/.twitter-keys.yaml keys: consumer_key: CONSUMER_KEY consumer_secret: CONSUMER_SECRET access_token: ACCESS_TOKEN access_token_secret: ACCESS_TOKEN_SECRET bearer_token: BEARER_TOKEN from twitter_stream import hide_replies response = hide_replies( tweet=\"https://twitter.com/saadmanrafat_/status/1327509412374740993\", hidden={\"hidden\": True} # {\"hidden\": False } in case of unhide ) print(response) OUTPUT: { \"data\": { \"hidden\": true } }","title":"Hide Replies"}]}